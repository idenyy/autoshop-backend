generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  name     String  @default("No Name")
  picture  String  @default("/uploads/no-user-image.png")

  role Role @default(CLIENT)

  orders    Order[]
  favorites Product[] @relation("UserFavorites")
  reviews   Review[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Product {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  price       Int
  stock       Int      @default(0)
  images      String[]

  reviews    Review[]
  orderItems OrderItem[]
  users      User[]      @relation("UserFavorites")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?   @map("supplier_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product")
}

model Category {
  id          String @id @default(cuid())
  title       String @unique
  description String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Supplier {
  id      String  @id @default(cuid())
  name    String  @unique
  phone   String?
  email   String?
  address String?

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("supplier")
}

model Review {
  id     String @id @default(cuid())
  text   String
  rating Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("review")
}

model Order {
  id     String      @id @default(cuid())
  status OrderStatus @default(PENDING)
  total  Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  items OrderItem[]

  paymentIntentId String? @unique @map("payment_intent_id")
  paymentStatus   String? @map("payment_status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_item")
}

enum Role {
  MANAGER
  CLIENT
}

enum OrderStatus {
  PENDING
  PAYED
  CANCELED
}
